// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamilsk/click/pkg/service (interfaces: Tracker)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/kamilsk/click/pkg/domain"
	reflect "reflect"
)

// MockTracker is a mock of Tracker interface
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// LogRedirect mocks base method
func (m *MockTracker) LogRedirect(arg0 context.Context, arg1 domain.RedirectEvent) error {
	ret := m.ctrl.Call(m, "LogRedirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogRedirect indicates an expected call of LogRedirect
func (mr *MockTrackerMockRecorder) LogRedirect(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRedirect", reflect.TypeOf((*MockTracker)(nil).LogRedirect), arg0, arg1)
}
