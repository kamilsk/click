// Code generated by go-bindata.
// sources:
// pkg/static/migrations/1_prepare.sql
// pkg/static/migrations/2_account.sql
// pkg/static/migrations/3_domain.sql
// pkg/static/migrations/4_audit.sql
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_prepareSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x6e\xab\x30\x10\x45\xf7\xf3\x15\xa3\x28\x8b\xf7\x52\x25\x1f\x50\xab\x0b\x12\x0f\xd4\x12\x35\x95\x6d\xd4\xec\x22\x54\x2c\x84\x14\x1c\x17\x8c\xfa\xfb\x15\xa0\x2a\x09\x4d\x16\x59\x7a\x7c\x7c\x7d\x7c\xbd\x5e\xe3\x53\x53\x57\x6d\x11\x2c\xe6\x1e\x60\xa7\x28\x32\x84\xb4\x37\x24\xb5\xc8\x24\x8a\x18\x65\x66\x90\xf6\x42\x1b\x8d\x8b\xbe\xaf\xcb\xf5\xa9\xeb\xfc\x82\x01\x5c\x1e\xd6\xa1\x08\xb6\xb1\x2e\x6c\x6d\x55\xbb\xdf\x9c\x38\x97\x3b\x33\xc4\xf4\xbe\x2c\x82\x3d\x84\xba\xb1\x5d\x28\x1a\xff\xef\x3f\x20\x2a\x32\xb9\x92\x1a\x8d\x12\x49\x42\x0a\x23\x8d\xcb\x39\xb8\x84\x2d\x25\x42\x02\x8e\x26\xf4\xb1\x59\xa1\xd0\xc8\x85\x36\x42\xee\x0c\xc6\x2a\x7b\xc3\x2c\xe5\x9b\x15\x20\x9a\x57\x1a\x40\x1c\xb9\x29\xa8\x3c\x14\x01\x9f\x5f\xf0\xb3\x6f\x5b\xeb\xc2\x39\x97\x8d\xe0\x64\x30\xf0\xc3\x9a\x52\x4d\x97\xe3\x2c\xe5\xe3\x58\x72\x14\x31\x03\x92\x9c\xc1\x0d\xc1\x34\x92\x49\x1e\x25\x84\xfe\xe8\xab\xee\xeb\xc8\x6e\x17\x43\xae\x7c\xa8\xb2\xba\x72\xa7\xd6\x1e\xa6\xfb\xee\xf6\x75\x45\x9d\xcb\xba\x7c\xc1\xe4\x3d\x03\x1f\x91\xbe\xd6\xe6\xa7\x6f\x07\xc0\x55\xf6\x7e\xd7\x95\xcd\xf7\xff\x7e\x3f\x83\x9f\x00\x00\x00\xff\xff\x9c\x73\x13\x2f\x7b\x02\x00\x00")

func staticMigrations1_prepareSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_prepareSql,
		"static/migrations/1_prepare.sql",
	)
}

func staticMigrations1_prepareSql() (*asset, error) {
	bytes, err := staticMigrations1_prepareSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_prepare.sql", size: 635, mode: os.FileMode(420), modTime: time.Unix(1531759404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations2_accountSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x95\xcb\x6f\x9b\x40\x10\xc6\xef\xfb\x57\x8c\x38\x61\x35\x39\x34\xed\xa1\x52\x4e\x1b\x18\x27\xa8\xb6\xa1\xdb\xdd\xb6\x39\xa1\xad\x59\x59\xa8\xe1\x21\xbc\x34\xfd\xf3\x2b\x08\xef\x47\xb0\x1c\xf7\x52\x6e\x36\x33\xdf\xc7\xfc\xbe\x61\xb9\xbe\x86\x77\x51\x78\xc8\xa4\x56\x20\x52\x42\x2c\x86\x94\x23\x70\x7a\xb7\x41\x30\xe4\x7e\x9f\xe4\xb1\x36\xc0\x24\x00\x46\x18\x18\x50\x5f\x42\x38\x76\xf3\x63\xe7\x72\xd8\x89\xcd\x06\x3c\xe6\x6c\x29\x7b\x84\xcf\xf8\x08\x36\xae\xa9\xd8\x70\xc8\xf3\x30\xf0\x0f\x2a\x56\x85\x87\xff\xfb\xa3\xb9\xba\x2a\xc4\x62\x19\xa9\x5a\xee\x1b\x65\xd6\x03\x65\xe6\xfb\x9b\x4f\xab\x46\xac\xac\xda\x67\x4a\x6a\x15\xf8\x52\x1b\xc0\x9d\x2d\x7e\xe5\x74\xeb\xf5\x2c\xbb\x57\x6d\x19\x27\xcf\x95\x4b\x9e\x06\x33\xfd\xc3\xde\x6e\x7f\x63\x1f\xa8\x27\x75\x5e\x3b\x59\xdd\x0e\x61\x16\x13\x1f\x53\xb9\x57\x0b\x38\xcf\xa1\x59\x05\xe5\x17\x9a\x53\x5a\xb3\xc8\x3f\xdc\x9c\x48\xfc\x8d\xc0\xdf\xc6\xfb\xa4\x6e\xb1\x73\xbe\x08\x04\xb3\x0b\xe3\xaa\x9a\x7a\x35\x91\x47\x7e\x54\xd9\xbf\xd8\xec\xb9\x2c\x96\xc3\xf8\xbf\xf7\x5f\x27\xbf\x54\xfc\x2a\xf0\x73\x68\x17\x29\xfa\x95\xdc\x58\xa9\x2c\x51\x7f\xd2\x30\x1b\x4d\x71\x1a\x81\xe9\x00\x96\xe9\xf7\xe6\x67\xce\xfd\x3d\xb2\x76\x33\xaa\x54\x0c\x02\x70\x87\x6b\x97\x21\x08\xcf\xa6\x1c\x09\x80\xbb\x6b\x4f\x5d\x02\xb0\x76\x19\x20\xb5\x1e\x80\xb9\xdf\x01\x7f\xa0\x25\x38\x82\xc7\x5c\x0b\x6d\xc1\x10\x5e\x84\x7c\x1d\x46\xea\xa8\x65\x94\x9a\x53\xae\xcd\xb9\xb3\xe4\xdb\x1e\x50\x17\x72\x2e\xb3\x59\x30\x2d\xdf\xc2\x0b\xf9\x85\x51\x94\x6b\xf9\xf3\x49\xf9\x2f\xbb\x36\x63\xd9\xdc\x5c\xf0\x0c\x0f\x71\x92\xd5\xd4\x4a\x43\x42\xba\xdf\x4b\x3b\x79\x8e\x09\xb1\x99\xeb\xbd\xf2\x08\xad\xe1\xed\xb0\xb6\x8f\xa7\x81\x31\xaa\x9b\x08\xb0\x1f\xd7\xa8\x63\xb4\x68\xdd\xb5\x6a\xaa\xbb\xaf\xe5\xe0\xcf\xfe\x83\x0c\xbf\x5f\x83\x1b\xad\xf0\xdf\x00\x00\x00\xff\xff\xbe\xe0\xf3\x54\x4e\x08\x00\x00")

func staticMigrations2_accountSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations2_accountSql,
		"static/migrations/2_account.sql",
	)
}

func staticMigrations2_accountSql() (*asset, error) {
	bytes, err := staticMigrations2_accountSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/2_account.sql", size: 2126, mode: os.FileMode(420), modTime: time.Unix(1531761937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations3_domainSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\x4f\x6f\xda\x40\x10\xc5\xef\xfb\x29\x46\x3e\x19\x95\x48\x0d\x4a\x7a\xe1\xb4\xd8\x43\xe2\x16\x6c\x77\xb3\xdb\x96\x93\xb5\xc5\x2b\x64\x15\x0c\x32\xeb\xe6\xeb\x57\xc4\x7f\xb0\xb7\x26\x04\x8c\x6f\xa0\x99\xf7\xc6\xf3\xdb\xb7\xbe\xbb\x83\x4f\x9b\x64\x95\x49\xad\x40\xec\x08\x71\x18\x52\x8e\xc0\xe9\x64\x86\x60\xad\x93\xf4\x8f\x05\x36\x01\xb0\x92\xd8\x82\xea\x11\xc2\x73\xeb\x1f\x7e\xc0\xc1\x17\xb3\x19\x84\xcc\x9b\x53\xb6\x80\x6f\xb8\x00\x17\xa7\x54\xcc\x38\xe4\x79\x12\x47\x2b\x95\xaa\x83\x41\xf4\xf7\xc1\x1e\x0c\x0f\x62\x72\xb9\xdc\xe6\xa9\x8e\x0e\xa2\x9d\x62\x6f\x55\xa9\xdc\xa8\xca\xf4\x07\x65\xce\x33\x65\xf6\xe8\xf1\xcb\xa0\x5d\xb5\xcc\x94\xd4\x2a\x8e\xa4\xb6\x80\x7b\x73\x7c\xe1\x74\x1e\xb6\x06\x6b\x3e\xd5\x60\xe9\xf6\xb5\x9c\x25\xdf\xc5\x27\xfa\xcd\xde\x66\x7f\x6d\x1f\xab\xb5\xba\xbe\x5d\xf8\xde\x77\x81\x60\x37\x37\x32\x2c\xdf\x7c\x40\x06\x63\x13\x88\x5c\x27\x72\xdf\x41\xe4\x06\x4c\x0e\xac\xa3\x5a\xf3\x7d\x2a\xfb\x9d\x5c\xaa\x33\xf4\xf2\x2c\x6d\xcc\x57\xf1\x7b\xbc\x1f\xbd\xc3\x0f\x7a\x13\x34\x15\x2e\x66\x78\x8d\x40\x4d\xb1\xb5\x9b\x61\xb1\x83\x2e\x8c\x5a\x66\x2b\xa5\xcf\x25\xab\x37\xc6\x6e\xb5\x92\x4e\x62\x99\x6c\xee\x3f\x8f\x1e\x0c\x38\x59\xbe\xae\x23\xf8\xf5\x25\xf0\x27\x47\xb5\x0f\x6d\xf6\x77\x74\x54\x98\x2c\x38\xd2\x0b\xfb\x4f\x86\xbb\x77\xba\xfb\xc6\xfb\xc2\x93\x51\x61\x19\x16\xab\x6f\x1f\x0a\xe6\x3d\x3d\x21\x2b\xd9\x95\x13\x5b\x04\x60\x82\xd3\x80\x21\x88\xd0\xa5\x1c\x09\x40\xe0\x97\x57\x32\x01\x98\x06\x0c\x90\x3a\xcf\xc0\x82\x9f\x80\xbf\xd0\x11\x1c\x21\x64\x81\x83\xae\x60\x08\x85\x4a\xa4\x93\x8d\xda\x6b\xb9\xd9\xd9\x5d\x7e\x6f\xb7\xc9\x39\xc3\xe2\xca\xb9\x91\x63\x71\xf0\xcf\x59\x96\xf1\xb8\xd2\x93\x90\xe6\x47\xcd\xdd\xbe\xa6\x84\xb8\x2c\x08\x4f\x4f\xd1\xf0\x1c\x9b\xb5\xc6\x8e\x8e\x1b\xf9\xaf\xb2\x4d\xaf\x66\x55\xd7\xb5\xa2\x6f\xfc\x6b\x48\x36\xbe\xbe\x63\xf2\x2f\x00\x00\xff\xff\xf6\xfa\xe4\x54\xa3\x07\x00\x00")

func staticMigrations3_domainSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations3_domainSql,
		"static/migrations/3_domain.sql",
	)
}

func staticMigrations3_domainSql() (*asset, error) {
	bytes, err := staticMigrations3_domainSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/3_domain.sql", size: 1955, mode: os.FileMode(420), modTime: time.Unix(1531762536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations4_auditSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd2\x51\x6f\xb2\x30\x14\x06\xe0\xfb\xfe\x8a\x13\xae\x30\xdf\x67\xb2\x2d\xbb\xf3\xaa\xc0\x51\xd9\x90\x92\xda\x6e\xf3\x8a\x74\xd0\x91\x66\x48\x0d\x2b\x71\x3f\x7f\x41\x45\x67\xe2\xe8\xf5\xd3\xf3\xb6\x79\xcf\x74\x0a\xff\xb6\xa6\x6a\x95\xd3\x20\x77\x84\x84\x1c\xa9\x40\x10\x34\x48\x10\xbc\xda\x56\x1e\xf8\x04\xc0\x33\xa5\x07\xc3\x09\xe2\xc5\x1a\x79\x4c\x13\xc8\x78\xbc\xa2\x7c\x03\xcf\xb8\xf9\xdf\x2b\x55\x14\xb6\x6b\x5c\xde\x6b\x29\xe3\xe8\x7c\x05\x52\x26\x20\x95\x49\x72\x60\xb5\x69\x3e\xf3\xd3\xc4\x11\xa6\x6a\xa3\xbe\x4e\x6e\x84\x39\xd5\x56\xfa\x98\x39\xc6\x4c\xa9\x1b\x67\x3e\x8c\x6e\x47\xdf\xd6\xb5\xe6\xfc\xd3\x17\xca\xc3\x25\xe5\xfe\xfd\xdd\xc3\xe3\xe4\x9a\x15\xb6\xd4\x83\x8b\x53\x81\x0b\xe4\xb7\xa6\x15\xb6\x71\xfa\xdb\x1d\xe4\xd3\x9a\xa5\xc1\xed\xd0\xa2\xd5\xca\xe9\x32\x57\xce\x03\x11\xaf\x70\x2d\xe8\x2a\xbb\x62\x10\xe1\x9c\xca\x44\x40\x63\xf7\xfe\x84\x4c\x66\x97\xaa\x78\xbc\xe8\xd3\x3d\xb3\xdd\x76\x4e\xbd\xd7\x3a\xef\x6b\x23\x00\x01\xce\x19\x47\x90\x59\x44\x05\x12\x00\x96\x1e\x1b\x25\x00\x73\xc6\x01\x69\xb8\x04\xce\x5e\x01\xdf\x30\x94\x02\x21\xe3\x2c\xc4\x48\x72\x04\x53\x35\xb6\xd5\x79\xb7\x2b\x95\xd3\x7e\x1f\x46\xc8\xef\x4d\x89\xec\xbe\x21\x24\xe2\x2c\xfb\x33\x7e\x08\x9b\x0d\xee\xb2\x51\x33\xf2\x13\x00\x00\xff\xff\xa4\x8a\x58\x64\x76\x02\x00\x00")

func staticMigrations4_auditSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations4_auditSql,
		"static/migrations/4_audit.sql",
	)
}

func staticMigrations4_auditSql() (*asset, error) {
	bytes, err := staticMigrations4_auditSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/4_audit.sql", size: 630, mode: os.FileMode(420), modTime: time.Unix(1531833730, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_prepare.sql": staticMigrations1_prepareSql,
	"static/migrations/2_account.sql": staticMigrations2_accountSql,
	"static/migrations/3_domain.sql": staticMigrations3_domainSql,
	"static/migrations/4_audit.sql": staticMigrations4_auditSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_prepare.sql": &bintree{staticMigrations1_prepareSql, map[string]*bintree{}},
			"2_account.sql": &bintree{staticMigrations2_accountSql, map[string]*bintree{}},
			"3_domain.sql": &bintree{staticMigrations3_domainSql, map[string]*bintree{}},
			"4_audit.sql": &bintree{staticMigrations4_auditSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

