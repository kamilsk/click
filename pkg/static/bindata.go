// Code generated by go-bindata.
// sources:
// pkg/static/migrations/1_prepare.sql
// pkg/static/migrations/2_account.sql
// pkg/static/migrations/3_domain.sql
// pkg/static/migrations/4_audit.sql
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_prepareSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x6e\xab\x30\x10\x45\xf7\xf3\x15\xa3\x28\x8b\xf7\x52\x25\x1f\x50\xab\x0b\x12\x0f\xd4\x12\x35\x95\x6d\xd4\xec\x22\x54\x2c\x84\x14\x1c\x17\x8c\xfa\xfb\x15\xa0\x2a\x09\x4d\x16\x59\x7a\x7c\x7c\x7d\x7c\xbd\x5e\xe3\x53\x53\x57\x6d\x11\x2c\xe6\x1e\x60\xa7\x28\x32\x84\xb4\x37\x24\xb5\xc8\x24\x8a\x18\x65\x66\x90\xf6\x42\x1b\x8d\x8b\xbe\xaf\xcb\xf5\xa9\xeb\xfc\x82\x01\x5c\x1e\xd6\xa1\x08\xb6\xb1\x2e\x6c\x6d\x55\xbb\xdf\x9c\x38\x97\x3b\x33\xc4\xf4\xbe\x2c\x82\x3d\x84\xba\xb1\x5d\x28\x1a\xff\xef\x3f\x20\x2a\x32\xb9\x92\x1a\x8d\x12\x49\x42\x0a\x23\x8d\xcb\x39\xb8\x84\x2d\x25\x42\x02\x8e\x26\xf4\xb1\x59\xa1\xd0\xc8\x85\x36\x42\xee\x0c\xc6\x2a\x7b\xc3\x2c\xe5\x9b\x15\x20\x9a\x57\x1a\x40\x1c\xb9\x29\xa8\x3c\x14\x01\x9f\x5f\xf0\xb3\x6f\x5b\xeb\xc2\x39\x97\x8d\xe0\x64\x30\xf0\xc3\x9a\x52\x4d\x97\xe3\x2c\xe5\xe3\x58\x72\x14\x31\x03\x92\x9c\xc1\x0d\xc1\x34\x92\x49\x1e\x25\x84\xfe\xe8\xab\xee\xeb\xc8\x6e\x17\x43\xae\x7c\xa8\xb2\xba\x72\xa7\xd6\x1e\xa6\xfb\xee\xf6\x75\x45\x9d\xcb\xba\x7c\xc1\xe4\x3d\x03\x1f\x91\xbe\xd6\xe6\xa7\x6f\x07\xc0\x55\xf6\x7e\xd7\x95\xcd\xf7\xff\x7e\x3f\x83\x9f\x00\x00\x00\xff\xff\x9c\x73\x13\x2f\x7b\x02\x00\x00")

func staticMigrations1_prepareSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_prepareSql,
		"static/migrations/1_prepare.sql",
	)
}

func staticMigrations1_prepareSql() (*asset, error) {
	bytes, err := staticMigrations1_prepareSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_prepare.sql", size: 635, mode: os.FileMode(420), modTime: time.Unix(1531759404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations2_accountSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\x4b\x6f\xab\x30\x10\x85\xf7\xfe\x15\x23\x56\x44\xf7\x66\x71\xaf\xba\xa8\x94\x95\x03\x93\x04\x95\x04\xe4\xda\x6d\xb3\x42\x34\x58\x11\x6a\x78\x88\x98\xa6\x3f\xbf\x82\x10\xc2\x23\x8f\x2a\x6a\x57\xf5\x0e\x98\x39\x1f\x73\x8e\xed\xe1\x10\xfe\x44\xe1\x3a\xf3\x95\x04\x91\x12\x62\x30\xa4\x1c\x81\xd3\xb1\x8d\xa0\xf9\xab\x55\x92\xc7\x4a\x03\x9d\x00\x68\x61\xa0\xc1\x61\x09\x61\x99\xf5\xc3\xc2\xe1\xb0\x10\xb6\x0d\x2e\xb3\xe6\x94\x2d\xe1\x01\x97\x60\xe2\x84\x0a\x9b\x43\x9e\x87\x81\xb7\x96\xb1\x2c\x18\xde\xfb\x9d\x3e\xf8\x5b\x88\xc5\x7e\x24\x0f\x72\x4f\x94\x19\x33\xca\xf4\x7f\xff\xef\x07\xb5\x58\x59\xb5\xca\xa4\xaf\x64\xe0\xf9\x4a\x03\x6e\xcd\xf1\x91\xd3\xb9\xdb\x42\x36\xd7\x01\x19\x27\xbb\x8a\x92\xa7\xc1\x99\xfe\x6e\x6f\xb3\xbf\xc6\x07\x72\x23\x6f\x6b\x27\x83\x51\xd7\xcc\x7c\x2b\xb3\x9f\x70\xb2\x0a\xc9\x2b\x44\x4f\x8a\xfd\x52\xbf\x55\xf2\x26\xe3\x8b\x86\xdf\xe2\x76\x91\xa2\x57\xc9\xf5\x95\xca\x12\xf9\x91\x86\x59\x6f\x8a\xaf\x39\x70\x3a\x80\xeb\xee\xb7\xe6\x67\xd6\x74\x8a\xec\xb8\x33\xaa\x54\x34\x02\x30\xc6\x89\xc3\x10\x84\x6b\x52\x8e\x04\xc0\x59\x1c\x4f\x39\x01\x98\x38\x0c\x90\x1a\x33\x60\xce\x33\xe0\x0b\x1a\x82\x23\xb8\xcc\x31\xd0\x14\x0c\x61\x2f\xe4\xa9\x30\x92\x5b\xe5\x47\xa9\x7e\x8a\x5a\x3a\x74\x05\x59\x9e\x85\x6f\xe2\x85\x51\x94\x2b\xff\x75\x23\xbd\x7d\xe2\x67\x90\xf5\xc7\x2b\xcc\x70\x1d\x27\x99\xac\x06\x28\x81\x84\x34\x6f\x49\x33\xd9\xc5\x84\x98\xcc\x71\x2f\xfc\xc2\x11\x38\xea\xd6\xb6\xed\xa9\xcd\xe8\xd5\xf5\xc2\x6b\x46\x55\x57\x37\xb7\x7a\xe7\x65\x5b\xb6\x7d\xa1\x8f\xc8\x67\x00\x00\x00\xff\xff\x36\x79\xef\x15\xf9\x05\x00\x00")

func staticMigrations2_accountSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations2_accountSql,
		"static/migrations/2_account.sql",
	)
}

func staticMigrations2_accountSql() (*asset, error) {
	bytes, err := staticMigrations2_accountSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/2_account.sql", size: 1529, mode: os.FileMode(420), modTime: time.Unix(1531834830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations3_domainSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\x41\x6f\x9b\x4c\x10\x86\xef\xfb\x2b\x46\x9c\xb0\x3e\x47\xfa\xe2\x26\xbd\xe4\xb4\x86\x75\x42\x6b\x03\xdd\xec\xb6\xf5\x09\x6d\xcd\xca\x42\xb5\xb1\x85\xa1\xf9\xfb\x15\x60\xf0\xb2\xc1\x26\x36\x94\x13\x42\x33\xef\x3b\xcc\xb3\x33\x70\x77\x07\xff\x6d\xa3\x75\x22\x52\x09\x7c\x8f\x90\x45\x09\x66\x04\x18\x9e\xce\x09\x18\xb1\xd8\xca\xc3\x5e\xac\xa4\x01\x26\x02\x30\xa2\xd0\x80\xea\xe2\xdc\xb1\xab\x7b\xd7\x63\xe0\xf2\xf9\x1c\x7c\xea\x2c\x30\x5d\xc2\x57\xb2\x04\x9b\xcc\x30\x9f\x33\xc8\xb2\x28\x0c\xd6\x32\x96\xb9\x49\xf0\xe7\xc1\x1c\x8d\x73\x2d\xb1\x5a\xed\xb2\x38\x0d\x72\xcd\x36\xad\x22\x28\x2f\xa0\xb2\xfc\x8e\xa9\xf5\x82\xa9\xf9\x69\x32\x6a\x06\xad\x12\x29\x52\x19\x06\x22\x35\x80\x39\x0b\xf2\xca\xf0\xc2\x57\xab\x52\xaf\xaa\xaa\x78\xf7\x76\x2c\x24\xdb\x87\xed\xe9\x7a\xaa\x9a\x5e\x9b\x87\x72\x23\x6f\xce\xe6\xae\xf3\x8d\x13\x30\xd5\x66\x8c\x8f\x6f\x3d\x42\xa3\x27\x9d\xc7\x26\x8a\x7f\x77\xa0\x18\x94\x45\x37\x8c\xc9\xe3\xe7\x0f\xd2\xe8\x8b\xa3\x27\x8f\x7f\x03\x44\x6c\x22\x71\x68\x21\x32\x30\x93\x33\x72\x45\x5c\x7e\x26\x82\xda\xfb\x32\xbd\x62\x96\x3b\x28\x67\x49\xac\xbc\x47\xc5\xf9\xf1\xfe\xd2\xd4\x41\x6f\xd2\xba\xc2\xd5\xac\x6f\x11\xa8\x69\x37\x7a\x33\x2e\x7b\xd0\x86\x3b\x15\xc9\x5a\xa6\x5d\x13\x38\xec\x08\x9e\xa7\x7d\x21\x2c\x4b\x22\x43\x47\x78\xff\xff\xe4\x41\x63\x98\x64\x9b\x7a\xa2\xbf\xbc\x7a\xee\xf4\xa4\xf6\x21\x00\xbf\x82\x93\xc2\x74\xc9\x08\xbe\x32\xff\xec\xae\xe8\xbd\x2c\xfa\x6e\x8b\x2b\x0f\x50\x85\x65\x5c\xb6\xbe\x79\x76\xa8\xf3\xfc\x4c\xa8\x3a\x81\xc7\xb2\x0d\x04\x30\x25\x33\x8f\x12\xe0\xbe\x8d\x19\x41\x00\x9e\xab\x7e\x76\x11\xc0\xcc\xa3\x40\xb0\xf5\x02\xd4\xfb\x01\xe4\x27\xb1\x38\x23\xe0\x53\xcf\x22\x36\xa7\x04\x4a\xa9\x20\x8d\xb6\xf2\x90\x8a\xed\xde\x6c\x73\x2e\xca\xeb\x30\x2d\xbe\x2d\x03\xf9\x15\x6b\xb1\xcb\xb0\xdc\x9d\x03\x39\x96\x93\xd9\x65\x79\x9c\xdf\x1b\x3d\x11\x52\xff\x96\xec\xdd\x5b\x8c\x90\x4d\x3d\xff\x7c\x15\x8a\xe7\x93\x1e\xab\xf5\xe8\xd4\x91\x77\x91\x4d\x7a\x35\xab\x77\x71\x2d\xe7\xab\x79\x9a\xea\x8c\xc6\x36\xd3\x9e\x6a\x45\x28\x3f\x1e\xda\x33\x55\xf7\x6f\x00\x00\x00\xff\xff\x37\x05\x76\xad\x47\x0a\x00\x00")

func staticMigrations3_domainSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations3_domainSql,
		"static/migrations/3_domain.sql",
	)
}

func staticMigrations3_domainSql() (*asset, error) {
	bytes, err := staticMigrations3_domainSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/3_domain.sql", size: 2631, mode: os.FileMode(420), modTime: time.Unix(1537434615, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations4_auditSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd2\x51\x6f\xb2\x30\x14\x06\xe0\xfb\xfe\x8a\x13\xae\x30\xdf\x67\xb2\x2d\xbb\xf3\xaa\xc0\x51\xd9\x90\x92\xda\x6e\xf3\x8a\x74\xd0\x91\x66\x48\x0d\x2b\x71\x3f\x7f\x41\x45\x67\xe2\xe8\xf5\xd3\xf3\xb6\x79\xcf\x74\x0a\xff\xb6\xa6\x6a\x95\xd3\x20\x77\x84\x84\x1c\xa9\x40\x10\x34\x48\x10\xbc\xda\x56\x1e\xf8\x04\xc0\x33\xa5\x07\xc3\x09\xe2\xc5\x1a\x79\x4c\x13\xc8\x78\xbc\xa2\x7c\x03\xcf\xb8\xf9\xdf\x2b\x55\x14\xb6\x6b\x5c\xde\x6b\x29\xe3\xe8\x7c\x05\x52\x26\x20\x95\x49\x72\x60\xb5\x69\x3e\xf3\xd3\xc4\x11\xa6\x6a\xa3\xbe\x4e\x6e\x84\x39\xd5\x56\xfa\x98\x39\xc6\x4c\xa9\x1b\x67\x3e\x8c\x6e\x47\xdf\xd6\xb5\xe6\xfc\xd3\x17\xca\xc3\x25\xe5\xfe\xfd\xdd\xc3\xe3\xe4\x9a\x15\xb6\xd4\x83\x8b\x53\x81\x0b\xe4\xb7\xa6\x15\xb6\x71\xfa\xdb\x1d\xe4\xd3\x9a\xa5\xc1\xed\xd0\xa2\xd5\xca\xe9\x32\x57\xce\x03\x11\xaf\x70\x2d\xe8\x2a\xbb\x62\x10\xe1\x9c\xca\x44\x40\x63\xf7\xfe\x84\x4c\x66\x97\xaa\x78\xbc\xe8\xd3\x3d\xb3\xdd\x76\x4e\xbd\xd7\x3a\xef\x6b\x23\x00\x01\xce\x19\x47\x90\x59\x44\x05\x12\x00\x96\x1e\x1b\x25\x00\x73\xc6\x01\x69\xb8\x04\xce\x5e\x01\xdf\x30\x94\x02\x21\xe3\x2c\xc4\x48\x72\x04\x53\x35\xb6\xd5\x79\xb7\x2b\x95\xd3\x7e\x1f\x46\xc8\xef\x4d\x89\xec\xbe\x21\x24\xe2\x2c\xfb\x33\x7e\x08\x9b\x0d\xee\xb2\x51\x33\xf2\x13\x00\x00\xff\xff\xa4\x8a\x58\x64\x76\x02\x00\x00")

func staticMigrations4_auditSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations4_auditSql,
		"static/migrations/4_audit.sql",
	)
}

func staticMigrations4_auditSql() (*asset, error) {
	bytes, err := staticMigrations4_auditSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/4_audit.sql", size: 630, mode: os.FileMode(420), modTime: time.Unix(1531856183, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_prepare.sql": staticMigrations1_prepareSql,
	"static/migrations/2_account.sql": staticMigrations2_accountSql,
	"static/migrations/3_domain.sql": staticMigrations3_domainSql,
	"static/migrations/4_audit.sql": staticMigrations4_auditSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_prepare.sql": &bintree{staticMigrations1_prepareSql, map[string]*bintree{}},
			"2_account.sql": &bintree{staticMigrations2_accountSql, map[string]*bintree{}},
			"3_domain.sql": &bintree{staticMigrations3_domainSql, map[string]*bintree{}},
			"4_audit.sql": &bintree{staticMigrations4_auditSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

