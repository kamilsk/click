// Code generated by go-bindata.
// sources:
// pkg/static/migrations/1_prepare.sql
// pkg/static/migrations/2_account.sql
// pkg/static/migrations/3_domain.sql
// pkg/static/migrations/4_audit.sql
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_prepareSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x6e\xab\x30\x10\x45\xf7\xf3\x15\xa3\x28\x8b\xf7\x52\x25\x1f\x50\xab\x0b\x12\x0f\xd4\x12\x35\x95\x6d\xd4\xec\x22\x54\x2c\x84\x14\x1c\x17\x8c\xfa\xfb\x15\xa0\x2a\x09\x4d\x16\x59\x7a\x7c\x7c\x7d\x7c\xbd\x5e\xe3\x53\x53\x57\x6d\x11\x2c\xe6\x1e\x60\xa7\x28\x32\x84\xb4\x37\x24\xb5\xc8\x24\x8a\x18\x65\x66\x90\xf6\x42\x1b\x8d\x8b\xbe\xaf\xcb\xf5\xa9\xeb\xfc\x82\x01\x5c\x1e\xd6\xa1\x08\xb6\xb1\x2e\x6c\x6d\x55\xbb\xdf\x9c\x38\x97\x3b\x33\xc4\xf4\xbe\x2c\x82\x3d\x84\xba\xb1\x5d\x28\x1a\xff\xef\x3f\x20\x2a\x32\xb9\x92\x1a\x8d\x12\x49\x42\x0a\x23\x8d\xcb\x39\xb8\x84\x2d\x25\x42\x02\x8e\x26\xf4\xb1\x59\xa1\xd0\xc8\x85\x36\x42\xee\x0c\xc6\x2a\x7b\xc3\x2c\xe5\x9b\x15\x20\x9a\x57\x1a\x40\x1c\xb9\x29\xa8\x3c\x14\x01\x9f\x5f\xf0\xb3\x6f\x5b\xeb\xc2\x39\x97\x8d\xe0\x64\x30\xf0\xc3\x9a\x52\x4d\x97\xe3\x2c\xe5\xe3\x58\x72\x14\x31\x03\x92\x9c\xc1\x0d\xc1\x34\x92\x49\x1e\x25\x84\xfe\xe8\xab\xee\xeb\xc8\x6e\x17\x43\xae\x7c\xa8\xb2\xba\x72\xa7\xd6\x1e\xa6\xfb\xee\xf6\x75\x45\x9d\xcb\xba\x7c\xc1\xe4\x3d\x03\x1f\x91\xbe\xd6\xe6\xa7\x6f\x07\xc0\x55\xf6\x7e\xd7\x95\xcd\xf7\xff\x7e\x3f\x83\x9f\x00\x00\x00\xff\xff\x9c\x73\x13\x2f\x7b\x02\x00\x00")

func staticMigrations1_prepareSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_prepareSql,
		"static/migrations/1_prepare.sql",
	)
}

func staticMigrations1_prepareSql() (*asset, error) {
	bytes, err := staticMigrations1_prepareSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_prepare.sql", size: 635, mode: os.FileMode(420), modTime: time.Unix(1531759404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations2_accountSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\x4b\x6f\xab\x30\x10\x85\xf7\xfe\x15\x23\x56\x44\xf7\x66\x71\xaf\xba\xa8\x94\x95\x03\x93\x04\x95\x04\xe4\xda\x6d\xb3\x42\x34\x58\x11\x6a\x78\x88\x98\xa6\x3f\xbf\x82\x10\xc2\x23\x8f\x2a\x6a\x57\xf5\x0e\x98\x39\x1f\x73\x8e\xed\xe1\x10\xfe\x44\xe1\x3a\xf3\x95\x04\x91\x12\x62\x30\xa4\x1c\x81\xd3\xb1\x8d\xa0\xf9\xab\x55\x92\xc7\x4a\x03\x9d\x00\x68\x61\xa0\xc1\x61\x09\x61\x99\xf5\xc3\xc2\xe1\xb0\x10\xb6\x0d\x2e\xb3\xe6\x94\x2d\xe1\x01\x97\x60\xe2\x84\x0a\x9b\x43\x9e\x87\x81\xb7\x96\xb1\x2c\x18\xde\xfb\x9d\x3e\xf8\x5b\x88\xc5\x7e\x24\x0f\x72\x4f\x94\x19\x33\xca\xf4\x7f\xff\xef\x07\xb5\x58\x59\xb5\xca\xa4\xaf\x64\xe0\xf9\x4a\x03\x6e\xcd\xf1\x91\xd3\xb9\xdb\x42\x36\xd7\x01\x19\x27\xbb\x8a\x92\xa7\xc1\x99\xfe\x6e\x6f\xb3\xbf\xc6\x07\x72\x23\x6f\x6b\x27\x83\x51\xd7\xcc\x7c\x2b\xb3\x9f\x70\xb2\x0a\xc9\x2b\x44\x4f\x8a\xfd\x52\xbf\x55\xf2\x26\xe3\x8b\x86\xdf\xe2\x76\x91\xa2\x57\xc9\xf5\x95\xca\x12\xf9\x91\x86\x59\x6f\x8a\xaf\x39\x70\x3a\x80\xeb\xee\xb7\xe6\x67\xd6\x74\x8a\xec\xb8\x33\xaa\x54\x34\x02\x30\xc6\x89\xc3\x10\x84\x6b\x52\x8e\x04\xc0\x59\x1c\x4f\x39\x01\x98\x38\x0c\x90\x1a\x33\x60\xce\x33\xe0\x0b\x1a\x82\x23\xb8\xcc\x31\xd0\x14\x0c\x61\x2f\xe4\xa9\x30\x92\x5b\xe5\x47\xa9\x7e\x8a\x5a\x3a\x74\x05\x59\x9e\x85\x6f\xe2\x85\x51\x94\x2b\xff\x75\x23\xbd\x7d\xe2\x67\x90\xf5\xc7\x2b\xcc\x70\x1d\x27\x99\xac\x06\x28\x81\x84\x34\x6f\x49\x33\xd9\xc5\x84\x98\xcc\x71\x2f\xfc\xc2\x11\x38\xea\xd6\xb6\xed\xa9\xcd\xe8\xd5\xf5\xc2\x6b\x46\x55\x57\x37\xb7\x7a\xe7\x65\x5b\xb6\x7d\xa1\x8f\xc8\x67\x00\x00\x00\xff\xff\x36\x79\xef\x15\xf9\x05\x00\x00")

func staticMigrations2_accountSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations2_accountSql,
		"static/migrations/2_account.sql",
	)
}

func staticMigrations2_accountSql() (*asset, error) {
	bytes, err := staticMigrations2_accountSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/2_account.sql", size: 1529, mode: os.FileMode(420), modTime: time.Unix(1531834830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations3_domainSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xcf\x92\x9a\x40\x10\xc6\xef\xf3\x14\x5d\x9c\xb0\xe2\x56\x65\xcd\x6e\x2e\x7b\x1a\x61\xdc\x25\x51\x20\xb3\x4c\x12\x4f\xd4\x44\xa6\x2c\x2a\x88\x16\x42\xf6\xf5\x53\xc8\xff\x59\x10\x15\x96\x9b\xd2\xf3\x7d\x4d\xff\xba\x1b\xee\xee\xe0\xd3\xce\xdf\x46\x3c\x16\xc0\x0e\x08\x69\x94\x60\x87\x80\x83\xe7\x4b\x02\x4a\xe0\x87\x7f\x15\x50\x11\x80\xe2\x7b\x0a\x14\x17\x63\x86\x5e\xfe\x30\x2d\x07\x4c\xb6\x5c\x82\x4d\x8d\x15\xa6\x6b\xf8\x4e\xd6\xa0\x93\x05\x66\x4b\x07\x92\xc4\xf7\xdc\xad\x08\x45\x6a\xe0\xfe\x7b\x50\x27\xd3\x54\x8c\x6f\x36\xfb\x24\x8c\xdd\x54\xb4\x55\xec\x14\x15\xf2\x9d\x28\x4c\x7f\x62\xaa\xbd\x60\xaa\xce\x1e\xbf\x4e\x9a\x51\x9b\x48\xf0\x58\x78\x2e\x8f\x15\x70\x8c\x15\x79\x75\xf0\xca\x6e\x24\x56\xbf\x8a\xc4\xc2\xfd\x5b\x9e\x4b\x72\xf0\x3a\xce\xcb\x67\xeb\xe7\x4b\x7b\x4f\x04\xe2\xf6\xe3\xcc\x34\x7e\x30\x02\x6a\xbd\x22\xd3\xfc\xc9\x27\x68\xf2\x24\x03\x49\x6f\x1c\x0f\x7c\x23\x7a\xa8\x8c\x09\xa5\x97\xc9\x97\xd9\x85\x48\x06\x12\x19\x06\xe4\x43\x78\xf0\xc0\xe7\xc7\x16\x16\x23\xcf\x48\x87\xdc\x29\x2e\x9d\x51\xb7\xf4\x3e\x3f\x4d\xa7\xd6\xe9\x99\xba\x24\x0a\x6b\xcf\x51\x30\x7e\xbc\x3f\x07\x19\x06\x4f\x9e\xac\x70\x35\xea\x5b\x04\x4a\xda\x8d\xda\x4c\xb3\x1a\xb4\xe1\x8e\x79\xb4\x15\x71\xdf\x46\x1c\x77\x25\x76\xd3\x3e\x13\x96\x44\x81\x22\x23\xbc\xff\x3c\x7b\x90\x18\x46\x49\x50\x4e\xf3\xb7\x57\xcb\x9c\x57\x6a\x17\x01\xf8\xe3\x56\x0a\xf3\xb5\x43\xf0\x95\xe7\x3b\x77\xf7\xe0\xe5\x3d\x74\x7b\x5f\xd9\x40\x05\x96\x69\x56\xfa\x66\xef\x50\xe3\xf9\x99\xd0\x9c\x5d\x9e\xb1\x82\x00\xe6\x64\x61\x51\x02\xcc\xd6\xb1\x43\x10\x80\x65\xe6\x6f\x5c\x04\xb0\xb0\x28\x10\xac\xbd\x00\xb5\x7e\x01\xf9\x4d\x34\xe6\x10\xb0\xa9\xa5\x11\x9d\x51\x02\x99\x8a\x1b\xfb\x3b\x71\x8c\xf9\xee\xa0\xb6\xf9\x55\x5d\xdd\x63\x5a\xbd\x55\x46\x72\x3e\xad\xc5\x3e\xd7\x6c\x77\x8e\xe4\x98\x4d\x66\x9f\x65\x3e\xbf\x37\x7a\x22\x54\xff\x5a\xd2\xf7\x6f\x21\x42\x3a\xb5\xec\xee\x2c\x6a\x9e\x4f\x72\xac\x54\xa3\xaa\x22\xef\x22\x5b\x38\x36\xa9\xbd\x3b\xd1\xec\xb4\xb2\xaf\xca\xb8\xc6\x36\x93\xfe\x95\x92\x90\xbf\x3b\xa4\x1b\xb9\xee\xff\x00\x00\x00\xff\xff\x3d\x6c\xfe\x6a\x47\x0a\x00\x00")

func staticMigrations3_domainSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations3_domainSql,
		"static/migrations/3_domain.sql",
	)
}

func staticMigrations3_domainSql() (*asset, error) {
	bytes, err := staticMigrations3_domainSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/3_domain.sql", size: 2631, mode: os.FileMode(420), modTime: time.Unix(1539340538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations4_auditSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6f\xe2\x30\x14\x84\xef\xfe\x15\x4f\x39\x05\xed\x22\xed\xae\xf6\xc6\xc9\x49\x1e\x90\xdd\x10\x47\xc6\x6e\xcb\x29\x72\x13\x17\x59\x4d\x1c\x14\x9c\xd2\x9f\x5f\x01\x85\x84\xaa\xa5\xf8\xfc\x8d\x67\xde\x68\xc6\x63\xf8\x51\x9b\x75\xab\x9c\x06\xb9\x21\x24\xe4\x48\x05\x82\xa0\x41\x82\xe0\xe9\x17\x6d\x9d\x07\x3e\x01\xf0\x4c\xe9\x41\xff\x82\x78\xb6\x44\x1e\xd3\x04\x32\x1e\x2f\x28\x5f\xc1\x7f\x5c\xfd\xdc\x73\xaa\x28\x9a\xce\xba\xfc\xc8\x4b\x19\x47\xbd\x2a\x65\x02\x52\x99\x24\x07\xd0\xaa\x5a\x6f\x37\xaa\xd0\x07\xf4\x0a\x58\x19\xfb\x9c\x9f\xed\x3f\x80\x32\x49\x20\xc2\x29\x95\xc9\x40\xa1\x2a\xa3\xb6\x67\xc9\x2d\x0a\xa7\xda\xb5\x3e\x85\xbe\x49\x51\x34\xa5\xee\x1b\x89\x53\x81\x33\xe4\x9f\xc5\xef\xda\x6a\xd0\xdc\x1d\xe5\xe1\x9c\x72\xff\xf7\xaf\x3f\x7f\x47\x97\xa0\x29\xb5\x75\xe6\xc9\xe8\xf6\x9b\xe6\x8a\xc6\x3a\xfd\xea\xde\x7f\xfd\xb7\x64\x69\xf0\x05\xd8\x6a\xe5\x74\x99\xab\x03\x2b\xe2\x05\x2e\x05\x5d\x64\x17\xe0\xf9\x32\xdb\xec\xfc\x11\x19\x4d\xfa\x11\xf0\x78\xb6\xbf\xc9\x33\x75\xdd\x39\xf5\x58\xe9\xfc\x38\x08\x02\x10\xe0\x94\x71\x04\x99\x45\x54\x20\x01\x60\xe9\x69\x2d\x04\x60\xca\x38\x20\x0d\xe7\xc0\xd9\x3d\xe0\x03\x86\x52\x20\x64\x9c\x85\x18\x49\x8e\x60\xd6\xb6\x69\x75\xde\x6d\x4a\xe5\xb4\xbf\x37\x24\x64\xb8\xc3\xa8\xd9\x59\x42\x22\xce\xb2\x2b\x11\x7a\xc3\xc9\x89\x1d\x6e\x76\x42\xde\x02\x00\x00\xff\xff\x38\x89\x22\xab\xda\x02\x00\x00")

func staticMigrations4_auditSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations4_auditSql,
		"static/migrations/4_audit.sql",
	)
}

func staticMigrations4_auditSql() (*asset, error) {
	bytes, err := staticMigrations4_auditSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/4_audit.sql", size: 730, mode: os.FileMode(420), modTime: time.Unix(1539341217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_prepare.sql": staticMigrations1_prepareSql,
	"static/migrations/2_account.sql": staticMigrations2_accountSql,
	"static/migrations/3_domain.sql": staticMigrations3_domainSql,
	"static/migrations/4_audit.sql": staticMigrations4_auditSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_prepare.sql": &bintree{staticMigrations1_prepareSql, map[string]*bintree{}},
			"2_account.sql": &bintree{staticMigrations2_accountSql, map[string]*bintree{}},
			"3_domain.sql": &bintree{staticMigrations3_domainSql, map[string]*bintree{}},
			"4_audit.sql": &bintree{staticMigrations4_auditSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

