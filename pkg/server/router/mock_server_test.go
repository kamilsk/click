// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamilsk/click/pkg/server/router (interfaces: Server)

// Package router_test is a generated GoMock package.
package router_test

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// GetV1 mocks base method
func (m *MockServer) GetV1(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetV1", arg0, arg1)
}

// GetV1 indicates an expected call of GetV1
func (mr *MockServerMockRecorder) GetV1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1", reflect.TypeOf((*MockServer)(nil).GetV1), arg0, arg1)
}

// Pass mocks base method
func (m *MockServer) Pass(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pass", arg0, arg1)
}

// Pass indicates an expected call of Pass
func (mr *MockServerMockRecorder) Pass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pass", reflect.TypeOf((*MockServer)(nil).Pass), arg0, arg1)
}

// Redirect mocks base method
func (m *MockServer) Redirect(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Redirect", arg0, arg1)
}

// Redirect indicates an expected call of Redirect
func (mr *MockServerMockRecorder) Redirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockServer)(nil).Redirect), arg0, arg1)
}
