// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Ignoring public import of Error from common.proto

// Ignoring public import of TimestampRange from common.proto

type LogEntry struct {
	Id                   uint32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LinkId               string               `protobuf:"bytes,3,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	AliasId              string               `protobuf:"bytes,4,opt,name=alias_id,json=aliasId,proto3" json:"alias_id,omitempty"`
	TargetId             string               `protobuf:"bytes,5,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Identifier           string               `protobuf:"bytes,6,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Uri                  string               `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	Code                 int32                `protobuf:"varint,8,opt,name=code,proto3" json:"code,omitempty"`
	Context              []byte               `protobuf:"bytes,9,opt,name=context,proto3" json:"context,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_003217d982fb782d, []int{0}
}
func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (dst *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(dst, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogEntry) GetLinkId() string {
	if m != nil {
		return m.LinkId
	}
	return ""
}

func (m *LogEntry) GetAliasId() string {
	if m != nil {
		return m.AliasId
	}
	return ""
}

func (m *LogEntry) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *LogEntry) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *LogEntry) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *LogEntry) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LogEntry) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *LogEntry) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type LogFilter struct {
	LinkId               string          `protobuf:"bytes,3,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	AliasId              string          `protobuf:"bytes,4,opt,name=alias_id,json=aliasId,proto3" json:"alias_id,omitempty"`
	TargetId             string          `protobuf:"bytes,5,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Identifier           string          `protobuf:"bytes,6,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Uri                  string          `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	Code                 int32           `protobuf:"varint,8,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt            *TimestampRange `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Limit                uint32          `protobuf:"varint,15,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LogFilter) Reset()         { *m = LogFilter{} }
func (m *LogFilter) String() string { return proto.CompactTextString(m) }
func (*LogFilter) ProtoMessage()    {}
func (*LogFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_003217d982fb782d, []int{1}
}
func (m *LogFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogFilter.Unmarshal(m, b)
}
func (m *LogFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogFilter.Marshal(b, m, deterministic)
}
func (dst *LogFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogFilter.Merge(dst, src)
}
func (m *LogFilter) XXX_Size() int {
	return xxx_messageInfo_LogFilter.Size(m)
}
func (m *LogFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_LogFilter.DiscardUnknown(m)
}

var xxx_messageInfo_LogFilter proto.InternalMessageInfo

func (m *LogFilter) GetLinkId() string {
	if m != nil {
		return m.LinkId
	}
	return ""
}

func (m *LogFilter) GetAliasId() string {
	if m != nil {
		return m.AliasId
	}
	return ""
}

func (m *LogFilter) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *LogFilter) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *LogFilter) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *LogFilter) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LogFilter) GetCreatedAt() *TimestampRange {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *LogFilter) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ReadLogsRequest struct {
	// Types that are valid to be assigned to Filter:
	//	*ReadLogsRequest_Id
	//	*ReadLogsRequest_Condition
	Filter               isReadLogsRequest_Filter `protobuf_oneof:"filter"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ReadLogsRequest) Reset()         { *m = ReadLogsRequest{} }
func (m *ReadLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ReadLogsRequest) ProtoMessage()    {}
func (*ReadLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_003217d982fb782d, []int{2}
}
func (m *ReadLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadLogsRequest.Unmarshal(m, b)
}
func (m *ReadLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadLogsRequest.Marshal(b, m, deterministic)
}
func (dst *ReadLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadLogsRequest.Merge(dst, src)
}
func (m *ReadLogsRequest) XXX_Size() int {
	return xxx_messageInfo_ReadLogsRequest.Size(m)
}
func (m *ReadLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadLogsRequest proto.InternalMessageInfo

type isReadLogsRequest_Filter interface {
	isReadLogsRequest_Filter()
}

type ReadLogsRequest_Id struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}
type ReadLogsRequest_Condition struct {
	Condition *LogFilter `protobuf:"bytes,2,opt,name=condition,proto3,oneof"`
}

func (*ReadLogsRequest_Id) isReadLogsRequest_Filter()        {}
func (*ReadLogsRequest_Condition) isReadLogsRequest_Filter() {}

func (m *ReadLogsRequest) GetFilter() isReadLogsRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ReadLogsRequest) GetId() uint32 {
	if x, ok := m.GetFilter().(*ReadLogsRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (m *ReadLogsRequest) GetCondition() *LogFilter {
	if x, ok := m.GetFilter().(*ReadLogsRequest_Condition); ok {
		return x.Condition
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReadLogsRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReadLogsRequest_OneofMarshaler, _ReadLogsRequest_OneofUnmarshaler, _ReadLogsRequest_OneofSizer, []interface{}{
		(*ReadLogsRequest_Id)(nil),
		(*ReadLogsRequest_Condition)(nil),
	}
}

func _ReadLogsRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReadLogsRequest)
	// filter
	switch x := m.Filter.(type) {
	case *ReadLogsRequest_Id:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case *ReadLogsRequest_Condition:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Condition); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReadLogsRequest.Filter has unexpected type %T", x)
	}
	return nil
}

func _ReadLogsRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReadLogsRequest)
	switch tag {
	case 1: // filter.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Filter = &ReadLogsRequest_Id{uint32(x)}
		return true, err
	case 2: // filter.condition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LogFilter)
		err := b.DecodeMessage(msg)
		m.Filter = &ReadLogsRequest_Condition{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReadLogsRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReadLogsRequest)
	// filter
	switch x := m.Filter.(type) {
	case *ReadLogsRequest_Id:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Id))
	case *ReadLogsRequest_Condition:
		s := proto.Size(x.Condition)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReadLogsResponse struct {
	Logs                 []*LogEntry `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	Err                  *Error      `protobuf:"bytes,15,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReadLogsResponse) Reset()         { *m = ReadLogsResponse{} }
func (m *ReadLogsResponse) String() string { return proto.CompactTextString(m) }
func (*ReadLogsResponse) ProtoMessage()    {}
func (*ReadLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_003217d982fb782d, []int{3}
}
func (m *ReadLogsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadLogsResponse.Unmarshal(m, b)
}
func (m *ReadLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadLogsResponse.Marshal(b, m, deterministic)
}
func (dst *ReadLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadLogsResponse.Merge(dst, src)
}
func (m *ReadLogsResponse) XXX_Size() int {
	return xxx_messageInfo_ReadLogsResponse.Size(m)
}
func (m *ReadLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadLogsResponse proto.InternalMessageInfo

func (m *ReadLogsResponse) GetLogs() []*LogEntry {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ReadLogsResponse) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type ListenLogsRequest struct {
	Filter               *LogFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListenLogsRequest) Reset()         { *m = ListenLogsRequest{} }
func (m *ListenLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ListenLogsRequest) ProtoMessage()    {}
func (*ListenLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_003217d982fb782d, []int{4}
}
func (m *ListenLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenLogsRequest.Unmarshal(m, b)
}
func (m *ListenLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenLogsRequest.Marshal(b, m, deterministic)
}
func (dst *ListenLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenLogsRequest.Merge(dst, src)
}
func (m *ListenLogsRequest) XXX_Size() int {
	return xxx_messageInfo_ListenLogsRequest.Size(m)
}
func (m *ListenLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenLogsRequest proto.InternalMessageInfo

func (m *ListenLogsRequest) GetFilter() *LogFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "grpc.LogEntry")
	proto.RegisterType((*LogFilter)(nil), "grpc.LogFilter")
	proto.RegisterType((*ReadLogsRequest)(nil), "grpc.ReadLogsRequest")
	proto.RegisterType((*ReadLogsResponse)(nil), "grpc.ReadLogsResponse")
	proto.RegisterType((*ListenLogsRequest)(nil), "grpc.ListenLogsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogClient interface {
	Read(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (*ReadLogsResponse, error)
	Listen(ctx context.Context, in *ListenLogsRequest, opts ...grpc.CallOption) (Log_ListenClient, error)
}

type logClient struct {
	cc *grpc.ClientConn
}

func NewLogClient(cc *grpc.ClientConn) LogClient {
	return &logClient{cc}
}

func (c *logClient) Read(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (*ReadLogsResponse, error) {
	out := new(ReadLogsResponse)
	err := c.cc.Invoke(ctx, "/grpc.Log/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Listen(ctx context.Context, in *ListenLogsRequest, opts ...grpc.CallOption) (Log_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Log_serviceDesc.Streams[0], "/grpc.Log/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &logListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Log_ListenClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type logListenClient struct {
	grpc.ClientStream
}

func (x *logListenClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServer is the server API for Log service.
type LogServer interface {
	Read(context.Context, *ReadLogsRequest) (*ReadLogsResponse, error)
	Listen(*ListenLogsRequest, Log_ListenServer) error
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Log/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Read(ctx, req.(*ReadLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServer).Listen(m, &logListenServer{stream})
}

type Log_ListenServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type logListenServer struct {
	grpc.ServerStream
}

func (x *logListenServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _Log_Read_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Log_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event.proto",
}

func init() { proto.RegisterFile("event.proto", fileDescriptor_event_003217d982fb782d) }

var fileDescriptor_event_003217d982fb782d = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x52, 0x41, 0x8f, 0xd3, 0x3c,
	0x10, 0x6d, 0x9a, 0x34, 0x4d, 0x26, 0xfb, 0x6d, 0xfb, 0x59, 0x0b, 0x6b, 0x82, 0x80, 0x28, 0x17,
	0x72, 0x4a, 0x51, 0x57, 0x08, 0x21, 0x71, 0x01, 0x69, 0xd1, 0x56, 0xca, 0x01, 0x59, 0x70, 0x65,
	0x95, 0x8d, 0x5d, 0xcb, 0x22, 0xb1, 0x8b, 0xe3, 0x22, 0xf8, 0x03, 0xfc, 0x5b, 0xfe, 0x03, 0x8a,
	0xdd, 0x6e, 0xab, 0xc2, 0x0f, 0xe0, 0xe6, 0x79, 0x6f, 0xe4, 0x79, 0xef, 0xcd, 0x40, 0xc2, 0xbe,
	0x31, 0x69, 0xca, 0x8d, 0x56, 0x46, 0xa1, 0x80, 0xeb, 0x4d, 0x93, 0x9e, 0x35, 0xaa, 0xeb, 0x94,
	0x74, 0x58, 0xfa, 0x8c, 0x2b, 0xc5, 0x5b, 0xb6, 0xb0, 0xd5, 0xdd, 0x76, 0xbd, 0x30, 0xa2, 0x63,
	0xbd, 0xa9, 0xbb, 0x8d, 0x6b, 0xc8, 0x7f, 0x8e, 0x21, 0xaa, 0x14, 0xbf, 0x96, 0x46, 0xff, 0x40,
	0xe7, 0x30, 0x16, 0x14, 0x7b, 0x99, 0x57, 0xfc, 0x47, 0xc6, 0x82, 0xa2, 0x4b, 0x98, 0xb6, 0x42,
	0x7e, 0xb9, 0x15, 0x14, 0xfb, 0x99, 0x57, 0xc4, 0x24, 0x1c, 0xca, 0x15, 0x45, 0x8f, 0x20, 0xaa,
	0x5b, 0x51, 0xf7, 0x03, 0x13, 0x58, 0x66, 0x6a, 0xeb, 0x15, 0x45, 0x8f, 0x21, 0x36, 0xb5, 0xe6,
	0xcc, 0x0c, 0xdc, 0xc4, 0x72, 0x91, 0x03, 0x56, 0x14, 0x3d, 0x05, 0x10, 0x94, 0x49, 0x23, 0xd6,
	0x82, 0x69, 0x1c, 0x5a, 0xf6, 0x08, 0x41, 0x73, 0xf0, 0xb7, 0x5a, 0xe0, 0xa9, 0x25, 0x86, 0x27,
	0x42, 0x10, 0x34, 0x8a, 0x32, 0x1c, 0x65, 0x5e, 0x31, 0x21, 0xf6, 0x8d, 0x30, 0x4c, 0x1b, 0x25,
	0x0d, 0xfb, 0x6e, 0x70, 0x9c, 0x79, 0xc5, 0x19, 0xd9, 0x97, 0xe8, 0x35, 0x40, 0xa3, 0x59, 0x6d,
	0x18, 0xbd, 0xad, 0x0d, 0x86, 0xcc, 0x2b, 0x92, 0x65, 0x5a, 0xba, 0x0c, 0xca, 0x7d, 0x06, 0xe5,
	0xc7, 0x7d, 0x06, 0x24, 0xde, 0x75, 0xbf, 0x35, 0xf9, 0x2f, 0x0f, 0xe2, 0x4a, 0xf1, 0xf7, 0xa2,
	0x35, 0x4c, 0xff, 0xab, 0xce, 0xaf, 0xfe, 0xe2, 0xef, 0xa2, 0x1c, 0xf6, 0x7e, 0x64, 0xaa, 0x96,
	0x9c, 0x1d, 0x39, 0x43, 0x17, 0x30, 0x69, 0x45, 0x27, 0x0c, 0x9e, 0xd9, 0xc5, 0xba, 0x22, 0xff,
	0x0c, 0x33, 0xc2, 0x6a, 0x5a, 0x29, 0xde, 0x13, 0xf6, 0x75, 0xcb, 0x7a, 0x83, 0xe6, 0x87, 0xf5,
	0xdf, 0x8c, 0xec, 0x01, 0x2c, 0x20, 0x6e, 0x94, 0xa4, 0xc2, 0x08, 0x25, 0xf1, 0xd8, 0x8e, 0x9b,
	0xb9, 0x71, 0xf7, 0x51, 0xdd, 0x8c, 0xc8, 0xa1, 0xe7, 0x5d, 0x04, 0xe1, 0xda, 0xc2, 0xf9, 0x27,
	0x98, 0x1f, 0xfe, 0xef, 0x37, 0x4a, 0xf6, 0x0c, 0xe5, 0x10, 0xb4, 0x8a, 0xf7, 0xd8, 0xcb, 0xfc,
	0x22, 0x59, 0x9e, 0xdf, 0xff, 0x64, 0xaf, 0x8f, 0x58, 0x0e, 0x3d, 0x01, 0x9f, 0x69, 0x6d, 0xb5,
	0x26, 0xcb, 0xc4, 0xb5, 0x5c, 0x6b, 0xad, 0x34, 0x19, 0xf0, 0xfc, 0x0d, 0xfc, 0x5f, 0x89, 0xde,
	0x30, 0x79, 0x2c, 0xfc, 0xf9, 0x7e, 0xaa, 0x15, 0xff, 0xa7, 0x46, 0xb2, 0xa3, 0x97, 0x5b, 0xf0,
	0x2b, 0xc5, 0xd1, 0x2b, 0x08, 0x06, 0x6d, 0xe8, 0x81, 0xeb, 0x3b, 0xc9, 0x21, 0x7d, 0x78, 0x0a,
	0x3b, 0xf9, 0xf9, 0x08, 0xbd, 0x84, 0xd0, 0x4d, 0x47, 0x97, 0xbb, 0x11, 0xa7, 0x5a, 0xd2, 0x13,
	0x57, 0xf9, 0xe8, 0x85, 0xf7, 0x61, 0x74, 0x17, 0xda, 0xe3, 0xbb, 0xfa, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x2b, 0x8a, 0x40, 0xf7, 0xb1, 0x03, 0x00, 0x00,
}
